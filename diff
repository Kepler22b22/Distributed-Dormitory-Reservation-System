diff --git a/client b/client
index 4d4f7e4..c58086b 100755
Binary files a/client and b/client differ
diff --git a/client.o b/client.o
index 0337874..ecf9e54 100644
Binary files a/client.o and b/client.o differ
diff --git a/serverA b/serverA
index d24d584..79649ce 100755
Binary files a/serverA and b/serverA differ
diff --git a/serverA.c b/serverA.c
index 322de25..251ec96 100644
--- a/serverA.c
+++ b/serverA.c
@@ -306,24 +306,54 @@ void handleQueries(const char* server_ip) {
     }
 
     while (1) {
+       printf("----waiting for main server's first msg\n");
         memset(buf, 0, sizeof(buf));
         if ((numbytes = recvfrom(sockfd, buf, sizeof(buf), 0, (struct sockaddr *)&their_addr, &addr_len)) == -1) {
             perror("recvfrom failed");
             continue; // Do not exit; continue receiving queries
         }
+       printf("----got msg froom ain server %s\n", buf);
+       char buffer[19];
+       memcpy(buffer, buf, 17);
+       buffer[17] = '\0';
 
-        char query_type[10], room_type[2];
+
+        char query_type[100];
+       char room_type;
         int building_id = -1;
-        sscanf(buf, "%s %s %d", query_type, room_type, &building_id);
+       printf("---in buffer content %s\n", buffer);
+       printf("---building id %c\n", buffer[strlen(buffer)-1]);
+       printf("---room_type %c\n", buffer[0]);
+       room_type = buffer[0];
+       printf("---check 1\n");
+       if (strstr(buffer, "avail") != NULL) {
+               strcpy(query_type, "availability");
+       } else if (strstr(buffer, "pri") != NULL) {
+               strcpy(query_type, "price");
+       } else if (strstr(buffer, "res") != NULL) {
+               strcpy(query_type, "reserve");
+       }
+       printf("---check 2\n");
+       building_id = atoi(&buffer[strlen(buffer)-1]);
+       printf("---check 2.5\n");
+       if (buffer[strlen(buffer)-2] == '-') {
+               building_id *= -1;
+       }
+       printf("---check 3\n");
+       
+        //sscanf(buffer, "%c %s %d", &query_type, room_type, &building_id);
 
         char response[MAX_LINE] = {0};
+       printf("----Query type %s\n", query_type);
+       printf("----room type %c\n", room_type);
+       printf("----building id %d\n", building_id);
         if (strcmp(query_type, "availability") == 0) {
-            printf("Server A has received a query of Availability for room type %s.\n", room_type);
+            printf("Server A has received a query of Availability for room type %c.\n", room_type);
             handleAvailability(room_type, response);
         } else if (strcmp(query_type, "price") == 0) {
-            printf("Server A has received a query of Price for room type %s.\n", room_type);
+            printf("Server A has received a query of Price for room type %c.\n", room_type);
         } else if (strcmp(query_type, "reserve") == 0) {
-            printf("Server A has received a query of Reserve for room type %s at Building ID %d.\n", room_type, building_id);
+            printf("Server A has received a query of Reserve for room type %c at Building ID %d.\n", room_type, building_id);
         }
 
         if (sendto(sockfd, response, strlen(response), 0, (struct sockaddr *)&their_addr, addr_len) == -1) {
diff --git a/serverA.o b/serverA.o
index 2ffe393..f9096b3 100644
Binary files a/serverA.o and b/serverA.o differ
diff --git a/serverB b/serverB
index a10bcba..e4bc2f1 100755
Binary files a/serverB and b/serverB differ
diff --git a/serverB.o b/serverB.o
index 646f0df..74d51c0 100644
Binary files a/serverB.o and b/serverB.o differ
diff --git a/serverC b/serverC
index b68ee50..aaaeb15 100755
Binary files a/serverC and b/serverC differ
diff --git a/serverC.o b/serverC.o
index f70344b..0ac1c51 100644
Binary files a/serverC.o and b/serverC.o differ
diff --git a/servermain b/servermain
index 86a9524..614bb3a 100755
Binary files a/servermain and b/servermain differ
diff --git a/servermain.c b/servermain.c
index 7957aa4..e08c736 100644
--- a/servermain.c
+++ b/servermain.c
@@ -486,14 +486,15 @@ void handle_client_query(int client_fd, int is_member) {
     int building_id = -1;
     char response[MAXBUFLEN];
     int bytes_received;
+    int sockfd;
 
     // Create a UDP socket for communication with campus servers
-    int udp_sockfd = socket(AF_INET, SOCK_DGRAM, 0);
+    /*int udp_sockfd = socket(AF_INET, SOCK_DGRAM, 0);
     if (udp_sockfd < 0) {
         perror("UDP socket creation failed");
         close(client_fd);
         return;
-    }
+    }*/
 
     printf("Handling client queries.\n");
 
@@ -504,42 +505,63 @@ void handle_client_query(int client_fd, int is_member) {
         if (bytes_received <= 0) {
             perror("Failed to receive room type and action");
             close(client_fd);
-            close(udp_sockfd);
+            //close(sockfd);
             return;
         }
+    printf("---checkpoint seg 1\n");
         buffer[bytes_received] = '\0'; // Null-terminate the input
         sscanf(buffer, "%s %s %d", room_type, action, &building_id); // Extract room type and action
 
+        printf("---checkpoint seg 1.1\n");
         // Prepare the query to send to the campus server
-        snprintf(buffer, MAXBUFLEN, "%s %s %d", room_type, action, building_id);
+        snprintf(buffer, MAXBUFLEN, "%s %s %d%c", room_type, action, building_id, '\0');
 
         // Resolve the address of the campus server
+        printf("---checkpoint seg 1.2\n");
         struct addrinfo hints, *servinfo, *p;
         memset(&hints, 0, sizeof hints);
         hints.ai_family = AF_INET;       // IPv4
         hints.ai_socktype = SOCK_DGRAM; // UDP socket
+        //hints.ai_flags = AI_PASSIVE;    // Bind to the local IP address
 
+        printf("---checkpoint seg 1.3\n");
         if (getaddrinfo("127.0.0.1", CAMPUS_PORTS[departmentList[0].server - 'A'], &hints, &servinfo) != 0) {
             perror("getaddrinfo failed");
             close(client_fd);
-            close(udp_sockfd);
+            //close(udp_sockfd);
             return;
         }
+    printf("---checkpoint seg 2\n");
+    for (p = servinfo; p != NULL; p = p->ai_next) {
+        if ((sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1) {
+            perror("Socket creation failed");
+            continue;
+        }
+        break;
+    }
+    printf("---checkpoint seg 3\n");
 
         // Send the query to the campus server
-        for (p = servinfo; p != NULL; p = p->ai_next) {
-            if (sendto(udp_sockfd, buffer, strlen(buffer), 0, p->ai_addr, p->ai_addrlen) == -1) {
+    /*    for (p = servinfo; p != NULL; p = p->ai_next) {
+            if (sendto(udp_sockfd, buffer, strlen(buffer), 0, p->ai_addr, p->ai_addrlen) < 0) {
                 perror("sendto failed");
                 continue;
             }
             break;
-        }
+        }*/
+    if (sendto(sockfd, buffer, strlen(buffer), 0, p->ai_addr, p->ai_addrlen) == -1) {
+        perror("sendto failed from main to campus");
+        close(sockfd);
+        freeaddrinfo(servinfo);
+        exit(1);
+    }
+    printf("---sent data to campus server %s\n", buffer);
 
         if (p == NULL) {
             fprintf(stderr, "Failed to send query to campus server\n");
             freeaddrinfo(servinfo);
             close(client_fd);
-            close(udp_sockfd);
+            close(sockfd);
             return;
         }
 
@@ -551,11 +573,11 @@ void handle_client_query(int client_fd, int is_member) {
         socklen_t addr_len = sizeof their_addr;
         memset(response, 0, MAXBUFLEN);
 
-        int numbytes = recvfrom(udp_sockfd, response, MAXBUFLEN - 1, 0, (struct sockaddr *)&their_addr, &addr_len);
+        int numbytes = recvfrom(sockfd, response, MAXBUFLEN - 1, 0, (struct sockaddr *)&their_addr, &addr_len);
         if (numbytes == -1) {
             perror("recvfrom failed");
             close(client_fd);
-            close(udp_sockfd);
+            close(sockfd);
             return;
         }
         response[numbytes] = '\0'; // Null-terminate the received string
@@ -569,7 +591,7 @@ void handle_client_query(int client_fd, int is_member) {
 
     // Close the UDP socket and client connection
     close(client_fd);
-    close(udp_sockfd);
+    close(sockfd);
 }
 
 // Main function
@@ -623,15 +645,32 @@ int main() {
         exit(1);
     }
 
+   int reuse = 1;
+    if (setsockopt(tcp_sockfd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) < 0) {
+        perror("setsockopt SO_REUSEADDR failed");
+        exit(1);
+    }
+
     // Bind and listen on the TCP socket
     struct sockaddr_in server_addr;
     server_addr.sin_family = AF_INET;
     server_addr.sin_addr.s_addr = INADDR_ANY;
     server_addr.sin_port = htons(atoi(MAIN_SERVER_TCP_PORT));
 
-    if (bind(tcp_sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
-        perror("TCP bind failed");
-        exit(1);
+
+    int retry = 1;
+    while (1) {
+    int ret = 0;
+       ret = bind(tcp_sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr));
+       printf("bind error %d\n", ret);
+       if (ret < 0) {
+               if (errno == EADDRINUSE) {
+                       continue;
+               }
+               perror("TCP bind failed");
+               exit(1);
+       }
+       break;
     }
 
     if (listen(tcp_sockfd, 10) < 0) {

